/* -*- C++ -*- */
/* Generated by D:\OpenDDS-3.14\OpenDDS-3.14\bin\opendds_idl version 3.14 (ACE version 6.2a_p18) running on input file dds_demo.idl */
#ifndef OPENDDS_IDL_GENERATED_DDS_DEMOTYPESUPPORTIMPL_H_GDYFPP
#define OPENDDS_IDL_GENERATED_DDS_DEMOTYPESUPPORTIMPL_H_GDYFPP
#include "dds_demoC.h"
#include "dds/DCPS/Definitions.h"
#include "dds/DdsDcpsC.h"
#include "dds/DCPS/Serializer.h"
#include "dds/DCPS/TypeSupportImpl.h"
#include "dds_demoTypeSupportC.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: demo */



/* Begin STRUCT: DataType */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const demo::DataType& stru, size_t& size, size_t& padding);

bool operator<<(Serializer& strm, const demo::DataType& stru);

bool operator>>(Serializer& strm, demo::DataType& stru);

size_t gen_max_marshaled_size(const demo::DataType& stru, bool align);

size_t gen_max_marshaled_size(KeyOnly<const demo::DataType> stru, bool align);

void gen_find_size(KeyOnly<const demo::DataType> stru, size_t& size, size_t& padding);

bool operator<<(Serializer& strm, KeyOnly<const demo::DataType> stru);

bool operator>>(Serializer& strm, KeyOnly<demo::DataType> stru);

template <>
struct MarshalTraits<demo::DataType> {
  static bool gen_is_bounded_size() { return true; }
  static bool gen_is_bounded_key_size() { return true; }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace demo {
/// This structure supports use of std::map with one or more keys.
struct  DataType_OpenDDS_KeyLessThan {
  bool operator()(const demo::DataType& v1, const demo::DataType& v2) const
  {
    using ::operator<; // TAO::String_Manager's operator< is in global NS
    if (v1.Handle < v2.Handle) return true;
    if (v2.Handle < v1.Handle) return false;
    return false;
  }
};
}


namespace demo {
class DataTypeTypeSupportImpl;
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {
template <>
struct DDSTraits<demo::DataType> {
  typedef demo::DataType MessageType;
  typedef demo::DataTypeSeq MessageSequenceType;
  typedef demo::DataTypeTypeSupport TypeSupportType;
  typedef demo::DataTypeTypeSupportImpl TypeSupportTypeImpl;
  typedef demo::DataTypeDataWriter DataWriterType;
  typedef demo::DataTypeDataReader DataReaderType;
  typedef demo::DataType_OpenDDS_KeyLessThan LessThanType;

  static const char* type_name () { return "demo::DataType"; }
  static bool gen_has_key () { return true; }
  static size_t key_count () { return 1; }

  static size_t gen_max_marshaled_size(const MessageType& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const MessageType& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }

  static size_t gen_max_marshaled_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace demo {
class  DataTypeTypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<DataTypeTypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<DataType> TraitsType;
  typedef DataTypeTypeSupport TypeSupportType;
  typedef DataTypeTypeSupport::_var_type _var_type;
  typedef DataTypeTypeSupport::_ptr_type _ptr_type;

  DataTypeTypeSupportImpl() {}
  virtual ~DataTypeTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;
  static DataTypeTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

class MetaStruct;

template<typename T>
const MetaStruct& getMetaStruct();

template<>
const MetaStruct& getMetaStruct<demo::DataType>();
bool gen_skip_over(Serializer& ser, demo::DataType*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: DataType */

/* End MODULE: demo */
#endif /* OPENDDS_IDL_GENERATED_DDS_DEMOTYPESUPPORTIMPL_H_GDYFPP */
